<?xml version="1.0"?>
<PanelData xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Name>WorldBuilderCity</Name>
  <App>Civ6</App>
  <EnterAction>g_PanelHasFocus = true;
if (g_PlacementSettings.Active) then
		LuaEvents.TunerEnterDebugMode();
end</EnterAction>
  <ExitAction>if (g_PanelHasFocus) then
	g_PanelHasFocus = false;
	if (g_PlacementSettings.Active) then
		 g_PlacementSettings.Active = false;
		 g_PlacementSettings.PlacementHandler = nil;
			LuaEvents.TunerExitDebugMode();
	end
end
</ExitAction>
  <CompatibleStates>
    <string>TunerWorldBuilderCityPanel</string>
  </CompatibleStates>
  <LoadStates>
    <string>TunerWorldBuilderCityPanel</string>
  </LoadStates>
  <Actions />
  <StringControls>
    <StringControlData>
      <Name>Placing</Name>
      <GetFunction>function(value)
	if (g_PlacementSettings.Active == true and g_PlacementSettings.PlacementHandler == g_DistrictPlacement) then
		return g_DistrictPlacement.DistrictTypeName;
	else
		return "";
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>560</X>
        <Y>400</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>Placing</Name>
      <GetFunction>function(value)
	if (g_PlacementSettings.Active == true and g_PlacementSettings.PlacementHandler == g_BuildingPlacement) then
		return g_BuildingPlacement.BuildingTypeName;
	else
		return "";
	end
end</GetFunction>
      <SetFunction>function(value)

end</SetFunction>
      <Location>
        <X>290</X>
        <Y>399</Y>
      </Location>
    </StringControlData>
    <StringControlData>
      <Name>Construction Percentage</Name>
      <GetFunction>function()
	return g_BuildingPlacement.ConstructionLevel;
end</GetFunction>
      <SetFunction>function(value)
	if (g_PlacementSettings.Active == true and g_PlacementSettings.PlacementHandler == g_BuildingPlacement) then
		return g_BuildingPlacement.BuildingTypeName;
	else
		return "";
	end
end</SetFunction>
      <Location>
        <X>290</X>
        <Y>432</Y>
      </Location>
    </StringControlData>
  </StringControls>
  <IntegerControls>
    <IntegerControlData>
      <Name>City Population</Name>
      <GetFunction>function(value)
	local pCity = GetSelectedCity();
	
	if (pCity ~= nil) then
		return WorldBuilder.CityManager():GetCityValue(pCity, "Population");
	end
		return 0;
end</GetFunction>
      <SetFunction>function(value)
	local pCity = GetSelectedCity();
	
	if (pCity ~= nil) then
		WorldBuilder.CityManager():SetCityValue(pCity, "Population", value);
	end
end</SetFunction>
      <Location>
        <X>10</X>
        <Y>403</Y>
      </Location>
      <DefaultValue>0</DefaultValue>
    </IntegerControlData>
  </IntegerControls>
  <FloatControls />
  <BooleanControls>
    <BooleanControlData>
      <Name>City Plot Owner Placement</Name>
      <GetFunction>function()
	return g_PlacementSettings.Active and
	       g_PlacementSettings.PlacementHandler == g_CityPlotPlacement;
end</GetFunction>
      <SetFunction>function(value)
	if value then
		LuaEvents.TunerEnterDebugMode();
		g_PlacementSettings.PlacementHandler = g_CityPlotPlacement;
	else
		if (g_PlacementSettings.PlacementHandler == g_CityPlotPlacement) then
			g_PlacementSettings.Active = false;
			LuaEvents.TunerExitDebugMode();
		end
	end
end</SetFunction>
      <Location>
        <X>10</X>
        <Y>367</Y>
      </Location>
    </BooleanControlData>
    <BooleanControlData>
      <Name>Place District</Name>
      <GetFunction>function()
	return g_PlacementSettings.Active and
	       g_PlacementSettings.PlacementHandler == g_DistrictPlacement;
end</GetFunction>
      <SetFunction>function(value)
	if value then
			g_PlacementSettings.PlacementHandler = g_DistrictPlacement;
			LuaEvents.TunerEnterDebugMode();
	else
		if (g_PlacementSettings.PlacementHandler == g_DistrictPlacement) then
			g_PlacementSettings.Active = false;
			LuaEvents.TunerExitDebugMode();
		end
	end
end</SetFunction>
      <Location>
        <X>560</X>
        <Y>363</Y>
      </Location>
    </BooleanControlData>
    <BooleanControlData>
      <Name>Place Building</Name>
      <GetFunction>function()
	return g_PlacementSettings.Active and
	       g_PlacementSettings.PlacementHandler == g_BuildingPlacement;
end</GetFunction>
      <SetFunction>function(value)
	if value then
			g_PlacementSettings.PlacementHandler = g_BuildingPlacement;
			LuaEvents.TunerEnterDebugMode();
	else
		if (g_PlacementSettings.PlacementHandler == g_BuildingPlacement) then
			g_PlacementSettings.Active = false;
			LuaEvents.TunerExitDebugMode();
		end
	end
end</SetFunction>
      <Location>
        <X>290</X>
        <Y>365</Y>
      </Location>
    </BooleanControlData>
  </BooleanControls>
  <TableViews />
  <DataViews />
  <StatTrackers />
  <SelectionLists>
    <SelectionListData>
      <Location>
        <X>10</X>
        <Y>44</Y>
      </Location>
      <Size>
        <Width>898</Width>
        <Height>308</Height>
      </Size>
      <Name>ID:50;Name:220;X:40;Y:40;Owner:220;Prev Owner:180;Orig Owner:180</Name>
      <PopulateList>function()
	local listItems = {};
	local i = 0;
	local z = 1;
	for i = 0, GameDefines.MAX_PLAYERS-1, 1 do
		local pPlayer = Players[i];
		local pPlayerConfig = PlayerConfigurations[i];

		if pPlayer:WasEverAlive()  then
			local strPlayer = pPlayerConfig:GetCivilizationShortDescription();
			if (#strPlayer == 0) then
				strPlayer = "Player " .. tostring(i);
			end
			
			local pCities = pPlayer:GetCities();
			local pCity;
			for ii, pCity in pCities:Members() do
				local prevOwner = -1; -- pCity:GetPreviousOwner();
				local prevOwnerStr = "none";
				if prevOwner ~= -1 then
					prevOwnerStr = PlayerConfigurations[prevOwner]:GetCivilizationShortDescription();
					if (#prevOwnerStr == 0) then
						prevOwnerStr = "Player " .. tostring(prevOwner);
					end
				end
				local origOwner = pCity:GetOriginalOwner();
				local origOwnerStr = "none";
				if origOwner ~= -1 then
					origOwnerStr = PlayerConfigurations[origOwner]:GetCivilizationShortDescription();
					if (#origOwnerStr == 0) then
						origOwnerStr = "Player " .. tostring(origOwner);
					end
				end
				local str = pPlayer:GetID() .. "," .. pCity:GetID() .. ";" .. pCity:GetName() .. ";" .. pCity:GetX() .. ";" .. pCity:GetY() .. ";" .. strPlayer .. ";" .. prevOwnerStr .. ";" .. origOwnerStr;
				listItems[z] = str;
				z = z + 1;			
			end		
		end
	end

  return listItems;
end</PopulateList>
      <OnSelection>function(selection)
	local selectionParts = {};
	-- No split available?
	local str1 = string.match(selection, "%d+");
	local str2 = string.match(selection, "%d+", string.len(str1) + 1);
	
	g_PlacementSettings.Player = tonumber(str1);
	g_PlacementSettings.CityID = tonumber(str2);	
end</OnSelection>
      <Sorted>false</Sorted>
    </SelectionListData>
  </SelectionLists>
  <MultiselectLists>
    <MultiselectListData>
      <Location>
        <X>560</X>
        <Y>465</Y>
      </Location>
      <Size>
        <Width>270</Width>
        <Height>488</Height>
      </Size>
      <Name>Districts</Name>
      <PopulateList>function()
	local listItems = {};

	local pCity = GetSelectedCity();
		
	local i = 1;
	local ID = 0;
	for district in GameInfo.Districts() do
		local item = {};
		item["Text"] = string.gsub(district.DistrictType, "DISTRICT_", "");
		if (pCity ~= nil and pCity:GetDistricts():HasDistrict(district.Index)) then
			item["Selected"] = true;
		else
			item["Selected"] = false;
		end
		
		listItems[i] = item;
		i = i + 1;
	end
	
   return listItems;
end</PopulateList>
      <OnSelected>function(selection)
	local pCity = GetSelectedCity();
		
	if (pCity ~= nil) then				
		-- Change the display name back to the full text key and look for it.
		local districtType = "DISTRICT_" .. tostring(selection);
		local district = GameInfo.Districts[districtType];
		if (district ~= nil) then
				-- Valid district type, check to see if it exists
			if (not pCity:GetDistricts():HasDistrict(district.Index)) then
						
				g_DistrictPlacement.DistrictType = district.Index;
				g_DistrictPlacement.DistrictTypeName = districtType;

				-- If placement is not active, then do so now.
				if (g_PlacementSettings.Active == false) then
					g_PlacementSettings.PlacementHandler = g_DistrictPlacement;
					LuaEvents.TunerEnterDebugMode();
				end						
			end
		end
	end
end</OnSelected>
      <OnDeselected>function(selection)
	local pCity = GetSelectedCity();
		
	if (pCity ~= nil) then				
		-- Change the display name back to the full text key and look for it.
		local districtType = "DISTRICT_" .. tostring(selection);
		local district = GameInfo.Districts[districtType];
		if (district ~= nil) then
				-- Valid district type, check to see if it exists
			if (pCity:GetDistricts():HasDistrict(district.Index)) then
				-- Remove any incomplete districts.
				pCity:GetBuildQueue():RemoveDistrict(district.Index);
				-- Remove completed districts.
				pCity:GetDistricts():RemoveDistrict(district.Index);
			end
		end
	end
end</OnDeselected>
    </MultiselectListData>
    <MultiselectListData>
      <Location>
        <X>290</X>
        <Y>467</Y>
      </Location>
      <Size>
        <Width>257</Width>
        <Height>482</Height>
      </Size>
      <Name>Buildings</Name>
      <PopulateList>function()
	local listItems = {};
	
	local pCity = GetSelectedCity();
	if (pCity ~= nil) then
		local pCityBuildings = pCity:GetBuildings();
		local pCityBuildQueue = pCity:GetBuildQueue();
		local i = 1;
		for building in GameInfo.Buildings() do
			local item = {};
			local name = string.gsub(building.BuildingType, "BUILDING_", "");
			if (building.RequiresPlacement ~= nil and building.RequiresPlacement == true) then
				name = name .. " (place)";
			end
			item["Text"] = name;
			if (pCityBuildings:HasBuilding(building.Index) or pCityBuildQueue:HasBuildingBeenPlaced(building.Index)) then
				item["Selected"] = true;
			else
				item["Selected"] = false;
			end
		
			listItems[i] = item;
			i = i + 1;
		end
	end
	
	return listItems;
end</PopulateList>
      <OnSelected>function(selection)
	local pCity = GetSelectedCity();
	if (pCity ~= nil) then
		local pCityBuildQueue = pCity:GetBuildQueue();
		-- Change the display name back to the full text key and look for it.
		local name = string.match(selection, '[^ ]*');
		local buildingType = "BUILDING_" .. tostring(name);
		print(buildingType);
		local building = GameInfo.Buildings[buildingType];
		if (building ~= nil) then
				g_BuildingPlacement.BuildingTypeName = buildingType;
				g_BuildingPlacement.BuildingType = building.Index;
				
				if (building.RequiresPlacement == true) then
					-- Building requires placement, go into that mode.
					g_PlacementSettings.PlacementHandler = g_BuildingPlacement;
					LuaEvents.TunerEnterDebugMode();
				else
					-- Just create it, it will go in its district.
					WorldBuilder.CityManager():CreateBuilding(pCity, g_BuildingPlacement.BuildingType, g_BuildingPlacement.ConstructionLevel);
				end
		end
	end
end</OnSelected>
      <OnDeselected>function(selection)
	local pCity = GetSelectedCity();
		
	if (pCity ~= nil) then
		local pCityBuildings = pCity:GetBuildings();
		-- Change the display name back to the full text key and look for it.
		local name = string.match(selection, '[^ ]*');
		local buildingType = "BUILDING_" .. tostring(name);
			
		local building  = GameInfo.Buildings[buildingType];
		if (building ~= nil) then
			WorldBuilder.CityManager():RemoveBuilding(pCity, building.Index);
		end
	end
end</OnDeselected>
    </MultiselectListData>
  </MultiselectLists>
</PanelData>