<?xml version="1.0"?>
<PanelData xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Name>City</Name>
  <App>Civ6</App>

  <EnterAction>
include("TunerCityPanel");
--include("TunerWorldBuilderPanel");
--include("TunerAssetPreviewPanel");
TunerCity and TunerCity:SetFocused(true)
  </EnterAction>

  <ExitAction>
TunerCity and TunerCity:SetFocused(false)
  </ExitAction>

  <CompatibleStates>
    <string>GameCore_Tuner</string>
    <string>TunerCityPanel</string>
    <string>CityPanel</string>
    <string>Main State</string>
    <string>InGame</string>
  </CompatibleStates>
  <LoadStates>
    <string>TunerCityPanel</string>
  </LoadStates>




  <SelectionLists>

    <SelectionListData>
      <Name>Cities-PID,CityID:-1;Original:70;Owner:90;Idx:40;Name:100;X,Y:40;Building:150</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>0</X>
        <Y>30</Y>
      </Location>
      <Size>
        <Width>680</Width>
        <Height>300</Height>
      </Size>

      <PopulateList>function(PopulateList,City)
  if not TunerCity then  return { "Error: ;;1 TunerCityPanel.lua not loaded" }  end
  return TunerCity:ListCities()
end
      </PopulateList>

      <OnSelection>function(selCity)
  local pCity = TunerCity and TunerCity:SelectCity(selCity)
  if not pCity then  return  end
end
      </OnSelection>
    </SelectionListData>


    <SelectionListData>
      <Name>Stats-Order:0;Stat:80;Value:40</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>700</X>
        <Y>30</Y>
      </Location>
      <Size>
        <Width>180</Width>
        <Height>150</Height>
      </Size>

      <PopulateList>function(PopulateList,CityStat)
  if not TunerCity then  return { "Error: ;3 TunerCityPanel.lua not loaded" }  end
  local items = {}
  items[0] = "-0;Population;"
  items[1] = "-1;Housing;"
  items[2] = "-2;Food Surplus;"
  -- items[3] = "-3;Gold Yield Modifier;"
  -- items[4] = "-4;Remaining Attacks;"

  local pCity = GetSelectedCity()
  if not pCity then  return items  end

  items[0] = items[0] .. pCity:GetPopulation()
  items[1] = items[1] .. pCity:GetGrowth():GetHousing()
  items[2] = items[2] .. pCity:GetGrowth():GetFoodSurplus()
  -- items[3] = items[3] .. pCity:GetGoldYieldModifier()
  -- items[4] = items[4] .. pCity:GetRemainingAttacks()
  return items;
end
      </PopulateList>

      <OnSelection>function(selCityStat)
end
      </OnSelection>
    </SelectionListData>


    <SelectionListData>
      <Name>City Property;Value</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>700</X>
        <Y>180</Y>
      </Location>
      <Size>
        <Width>180</Width>
        <Height>150</Height>
      </Size>

      <PopulateList>function(PopulateList,CityProperty)
  if not TunerCity then  return { "Error: 4 TunerCityPanel.lua not loaded" }  end
  local pCity = TunerCity:GetSelectedCity()
  if not pCity then  return  end

  local props = pCity:GetProperties();
  local items = {};
  for k,v in pairs(props) do
    local line = k .. ";" .. tostring(v);
    table.insert(items, line);
    if ( k == TunerCity.options.PropertyKey ) then
      items.selected = #items;
    end
  end

  return items;
end
      </PopulateList>

      <OnSelection>function(selCityProperty)
  if not TunerCity then  return  end
  TunerCity.options.PropertyKey = selCityProperty;
end
      </OnSelection>
    </SelectionListData>


    <SelectionListData>
      <Name>Revealed to Civ;NickName</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>900</X>
        <Y>30</Y>
      </Location>
      <Size>
        <Width>180</Width>
        <Height>300</Height>
      </Size>

      <PopulateList>function(PopulateList,RevealedToCiv)
  if not TunerCity then  return { "Error: 2 TunerCityPanel.lua not loaded" }  end
  local pCity = TunerCity:GetSelectedCity()
  if not pCity then  return  end

  local listItems = {};
  if pCity ~= nil then
    for i = 0, GameDefines.MAX_PLAYERS-1, 1 do
      local pPlayer = Players[i];
      if pPlayer:WasEverAlive() and PlayersVisibility[i]:IsRevealed(pCity:GetX(), pCity:GetY()) then
        local pPlayerConfig = PlayerConfigurations[i];
        local properCivName = Locale.Lookup( pPlayerConfig:GetCivilizationShortDescription() );
        local str = properCivName .. ";" .. pPlayerConfig:GetNickName();
        table.insert( listItems, str );
      end
    end
  end

  return listItems;
end
      </PopulateList>

      <OnSelection>function(selRevealedToCiv)
end
      </OnSelection>
    </SelectionListData>


    <SelectionListData>
      <Name>Spoof City Owner</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>1100</X>
        <Y>30</Y>
      </Location>
      <Size>
        <Width>180</Width>
        <Height>300</Height>
      </Size>

      <PopulateList>function(PopulateList,SpoofToCiv)
  if not TunerCity then  return { { Text = "Error: 9 TunerCityPanel.lua not loaded" } }  end
  local pCity = TunerCity:GetSelectedCity()
  if not pCity then  return  end

  local ownerIdx = pCity:GetOwner();
  local ownerCivName = PlayerConfigurations[ownerIdx]:GetCivilizationShortDescription();
  local listItems = {};
  --for civ, i in GameInfo.Civilizations() do
  for i = 0, GameDefines.MAX_PLAYERS-1, 1 do
    local pPlayer = Players[i];
    if pPlayer:WasEverAlive() then
      local spoofCivName = PlayerConfigurations[i]:GetCivilizationShortDescription()
      local item = {
        Text = Locale.Lookup( spoofCivName ),
        Selected = (spoofCivName == ownerCivName),
      }
      table.insert( listItems, item );
    end
  end

  return listItems;
end
      </PopulateList>

      <OnSelection>function(selSpoofToCiv)
  local pCity = TunerCity and TunerCity:GetSelectedCity()
  if not pCity then  return  end

  for i = 0, GameDefines.MAX_PLAYERS-1, 1 do
    local pPlayer = Players[i];
    local spoofCivName = pPlayer:WasEverAlive() and PlayerConfigurations[i]:GetCivilizationShortDescription()
    if spoofCivName and Locale.Lookup( spoofCivName ) == selSpoofToCiv then
      print('----');
      print('ContextPtr[panel]' , ContextPtr);
      print( 'LuaEvents.SetCityCiv(city):' )
      LuaEvents.SetCityCiv(pCity:GetX(), pCity:GetY(), civ.Index );
      print('----');
      break;
    end
  end
end
      </OnSelection>

    </SelectionListData>




    <SelectionListData>
      <Name>Constructed:0;Building:90;X,Y:40;Complete:60;Pillaged:60;DistrictID:60;</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>0</X>
        <Y>360</Y>
      </Location>
      <Size>
        <Width>580</Width>
        <Height>300</Height>
      </Size>

      <PopulateList>function(PopulateList,DistrictState)
  if not TunerCity then  return { "Error: 5 TunerCityPanel.lua not loaded" }  end
  local pCity = TunerCity:GetSelectedCity()
  if not pCity then  return  end

  local items = {};
  local pDistricts = pCity:GetDistricts();
  local numDistricts = pDistricts:GetNumDistricts();
  for districtInfo in GameInfo.Districts() do
    if pDistricts:HasDistrict(districtInfo.Index) then
      local name = districtInfo.DistrictType:gsub("DISTRICT_", "");
      local nameLoc = Locale.Lookup( districtInfo.Name );
      local prev = nil;
      -- numDistricts= max iterations as a safeguard against infinite loop
      for i = 0, numDistricts, 1 do
        local pDistrict = pDistricts:GetDistrict(districtInfo.Index, i);
        if pDistrict == nil or pDistrict == prev then  break  end
        prev = pDistrict
        local str = name
          .. ";" .. nameLoc
          .. ";" .. pDistrict:GetX() .. "," .. pDistrict:GetY()
          .. ";" .. tostring(pDistrict:IsComplete())
          .. ";" .. tostring(pDistrict:IsPillaged())
          .. ";" .. pDistrict:GetID()
        table.insert(items, str)
      end
    end
  end
  return items;
end
      </PopulateList>

      <OnSelection>function(selDistrictState)
  return TunerCity and TunerCity:SelectDistrictByID(selDistrictState)
end
      </OnSelection>

    </SelectionListData>


    <SelectionListData>
      <Name>Districts:0;District:90;Note:60</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>600</X>
        <Y>360</Y>
      </Location>
      <Size>
        <Width>180</Width>
        <Height>300</Height>
      </Size>

      <PopulateList>function(PopulateList,Building)
  return TunerCity and TunerCity:ListCityDistrictsOrBuildings( items, 'district', true )  -- district | building | wonder
end
      </PopulateList>

      <OnSelection>function(selBuilding)
  return TunerCity and TunerCity:SelectBuilding(selBuilding, 'district')
end
      </OnSelection>

    </SelectionListData>


    <SelectionListData>
      <Name>Buildings:0;Building:90;Note:60</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>800</X>
        <Y>360</Y>
      </Location>
      <Size>
        <Width>180</Width>
        <Height>300</Height>
      </Size>

      <PopulateList>function(PopulateList,Building)
  return TunerCity and TunerCity:ListCityDistrictsOrBuildings( items, 'building', true )  -- district | building | wonder
end
      </PopulateList>

      <OnSelection>function(selBuilding)
  return TunerCity and TunerCity:SelectBuilding(selBuilding, 'building')
end
      </OnSelection>

    </SelectionListData>


    <SelectionListData>
      <Name>Wonders:0;Wonder:90;Note:60</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>1000</X>
        <Y>360</Y>
      </Location>
      <Size>
        <Width>180</Width>
        <Height>300</Height>
      </Size>

      <PopulateList>function(PopulateList,Building)
  return TunerCity and TunerCity:ListCityDistrictsOrBuildings( items, 'wonder', true )  -- district | building | wonder
end
      </PopulateList>

      <OnSelection>function(selBuilding)
  return TunerCity and TunerCity:SelectBuilding(selBuilding, 'wonder')
end
      </OnSelection>

    </SelectionListData>

  </SelectionLists>




  <MultiselectLists>

    <MultiselectListData>
      <Name>Pillaged Buildings</Name>
      <Sorted>false</Sorted>

      <Location>
        <X>1200</X>
        <Y>360</Y>
      </Location>
      <Size>
        <Width>180</Width>
        <Height>300</Height>
      </Size>

      <PopulateList>function(PopulateList,PillagedBuilding)
  if not TunerCity then  return { { Text = "Error: 8 TunerCityPanel.lua not loaded" } }  end
  local pCity = TunerCity:GetSelectedCity()
  if not pCity then  return  end

  local listItems = {};
  local pCityBuildings = pCity:GetBuildings();
  local i = 1;
  for buildingInfo in GameInfo.Buildings() do
    local item = {};
    local name = Locale.Lookup( buildingInfo.Name );
    --local name = buildingInfo.BuildingType:gsub("BUILDING_", "");
    if pCityBuildings:HasBuilding(buildingInfo.Index) then
      --item.Text = name;
      item.Text = name .. ";;;;" .. buildingInfo.BuildingType;
      item.Selected =  pCityBuildings:IsPillaged(buildingInfo.Index)
      listItems[i] = item;
      i = i + 1;
    end
  end

  return listItems;
end
      </PopulateList>

      <OnSelected>function(selPillagedBuilding)
  if not TunerCity then  return  end
  TunerCity:SetBuildingPillaged( selPillagedBuilding , true)
end
      </OnSelected>

      <OnDeselected>function(deselPillagedBuilding)
  if not TunerCity then  return  end
  TunerCity:SetBuildingPillaged( deselPillagedBuilding , false)
end
      </OnDeselected>

    </MultiselectListData>

  </MultiselectLists>




  <BooleanControls>
    <BooleanControlData>
      <Name>Place District</Name>
      <Location>
        <X>600</X>
        <Y>660</Y>
      </Location>

      <GetFunction>function(IsPlaceDistrict)
  return TunerCity and TunerCity:GetPlacementBuilding('district')
end
      </GetFunction>

      <SetFunction>function(IsPlaceDistrict)
  if not TunerCity then  return  end
  if IsPlaceDistrict then
    return TunerCity:StartPlacement('building')
  else
    return TunerCity:CancelPlacementMode()
  end
end
      </SetFunction>
    </BooleanControlData>

    <BooleanControlData>
      <Name>Place Building</Name>
      <Location>
        <X>800</X>
        <Y>690</Y>
      </Location>

      <GetFunction>function(IsPlaceBuilding)
  return TunerCity and TunerCity:GetPlacementBuilding('building')
end
      </GetFunction>

      <SetFunction>function(IsPlaceBuilding)
  if not TunerCity then  return  end
  if IsPlaceBuilding then
    return TunerCity:StartPlacement('building')
  else
    return TunerCity:CancelPlacementMode()
  end
end
      </SetFunction>
    </BooleanControlData>

    <BooleanControlData>
      <Name>Pick City</Name>
      <Location>
        <X>240</X>
        <Y>320</Y>
      </Location>

      <GetFunction>function(IsPickCity)
end
      </GetFunction>

      <SetFunction>function(IsPickCity)
end
      </SetFunction>
    </BooleanControlData>
  </BooleanControls>

  <IntegerControls>

    <IntegerControlData>
      <Name>City Count</Name>
      <DefaultValue>0</DefaultValue>
      <Location>
        <X>10</X>
        <Y>330</Y>
      </Location>

      <GetFunction>function(CityCount)
  local i = 0;
  local count = 0;
  for i = 0, GameDefines.MAX_PLAYERS-1, 1 do
    local pPlayer = Players[i];
    if pPlayer:WasEverAlive() then
      count = count + pPlayer:GetCities():GetCount();
    end
  end
  return count;
end
      </GetFunction>

      <SetFunction>function(CityCount)
end
      </SetFunction>
    </IntegerControlData>

    <IntegerControlData>
      <Name>District Count</Name>
      <DefaultValue>0</DefaultValue>
      <Location>
        <X>120</X>
        <Y>330</Y>
      </Location>

      <GetFunction>function(DistrictCount)
  local i = 0;
  local count = 0;
  for i = 0, GameDefines.MAX_PLAYERS-1, 1 do
    local pPlayer = Players[i];
    if pPlayer:WasEverAlive() then
      count = count + pPlayer:GetDistricts():GetCount();
    end
  end
  return count;
end
      </GetFunction>

      <SetFunction>function(DistrictCount)
end
      </SetFunction>
    </IntegerControlData>




    <IntegerControlData>
      <Name>Add Production</Name>
      <DefaultValue>1</DefaultValue>
      <Location>
        <X>250</X>
        <Y>660</Y>
      </Location>

      <GetFunction>function(AddProduction)
  return TunerCity and TunerCity.options.AddProduction or 1;
end
      </GetFunction>

      <SetFunction>function(AddProduction)
  TunerCity.options.AddProduction = AddProduction;
end
      </SetFunction>
    </IntegerControlData>


    <IntegerControlData>
      <Name>Build Percent</Name>
      <DefaultValue>100</DefaultValue>
      <Location>
        <X>460</X>
        <Y>660</Y>
      </Location>

      <GetFunction>function(BuildPercent)
  return TunerCity and TunerCity:GetBuildPercent() or "??";
end
      </GetFunction>

      <SetFunction>function(BuildPercent)
  TunerCity:SetBuildPercent(BuildPercent)
end
      </SetFunction>
    </IntegerControlData>




    <IntegerControlData>
      <Name>CityCenter Outer Damage</Name>
      <DefaultValue>0</DefaultValue>
      <Location>
        <X>10</X>
        <Y>800</Y>
      </Location>

      <GetFunction>function(OuterDamage)
  local pDistrict = TunerCity and TunerCity:GetSelectedCityCenter()
  return pDistrict and pDistrict.GetDamage and pDistrict:GetDamage(DefenseTypes.DISTRICT_OUTER);
end
      </GetFunction>

      <SetFunction>function(OuterDamage)
  local pDistrict = TunerCity and TunerCity:GetSelectedCityCenter()
  return pDistrict and pDistrict:SetDamage(DefenseTypes.DISTRICT_OUTER, OuterDamage)
end
      </SetFunction>
    </IntegerControlData>

    <IntegerControlData>
      <Name>CityCenter Garrison Damage</Name>
      <DefaultValue>0</DefaultValue>
      <Location>
        <X>10</X>
        <Y>830</Y>
      </Location>

      <GetFunction>function(GarrisonDamage)
  local pDistrict = TunerCity and TunerCity:GetSelectedCityCenter()
  return pDistrict and pDistrict.GetDamage and pDistrict:GetDamage(DefenseTypes.DISTRICT_GARRISON);
end
      </GetFunction>

      <SetFunction>function(GarrisonDamage)
  local pDistrict = TunerCity and TunerCity:GetSelectedCityCenter()
  return pDistrict and pDistrict:SetDamage(DefenseTypes.DISTRICT_GARRISON, GarrisonDamage);
end
      </SetFunction>
    </IntegerControlData>

    <IntegerControlData>
      <Name>Encampement Garrison Damage</Name>
      <DefaultValue>0</DefaultValue>
      <Location>
        <X>10</X>
        <Y>860</Y>
      </Location>

      <GetFunction>function(GarrisonDamage)
  local pDistrict = TunerCity and TunerCity:GetDistrictOfSelectedCity('DISTRICT_ENCAMPMENT');
  return pDistrict and pDistrict.GetDamage and pDistrict:GetDamage(DefenseTypes.DISTRICT_GARRISON);
end
      </GetFunction>

      <SetFunction>function(GarrisonDamage)
  local pDistrict = TunerCity and TunerCity:GetDistrictOfSelectedCity('DISTRICT_ENCAMPMENT');
  return pDistrict and pDistrict:SetDamage(DefenseTypes.DISTRICT_GARRISON, GarrisonDamage);
end
      </SetFunction>
    </IntegerControlData>

  </IntegerControls>




  <StringControls>

    <StringControlData>
      <Name>City Name:200</Name>
      <Location>
        <X>250</X>
        <Y>330</Y>
      </Location>

      <GetFunction>function(CityName)
  local pCity = TunerCity and TunerCity:GetSelectedCity()
  if not pCity then  return "- select city -"  end
  return Locale.Lookup( pCity:GetName() )
end
      </GetFunction>

      <SetFunction>function(CityName)
  local pCity = TunerCity and TunerCity:GetSelectedCity()
  return pCity and pCity:SetName(CityName)
end
      </SetFunction>
    </StringControlData>


    <StringControlData>
      <Name>Currently Building</Name>
      <Location>
        <X>10</X>
        <Y>660</Y>
      </Location>

      <GetFunction>function(CurrentlyBuilding)
  return TunerCity and TunerCity:GetCurrentlyBuilding() or ""
end
      </GetFunction>

      <SetFunction>function(CurrentlyBuilding)
end
      </SetFunction>
    </StringControlData>




    <StringControlData>
      <Name>Place District</Name>
      <Location>
        <X>600</X>
        <Y>690</Y>
      </Location>

      <GetFunction>function(PlaceDistrict)
  local dbBuildingInfo = TunerCity and TunerCity:GetPlacementBuilding('district')
  return dbBuildingInfo and Locale.Lookup( dbBuildingInfo.Name ) or ""
end
      </GetFunction>

      <SetFunction>function(PlaceDistrict)
end
      </SetFunction>
    </StringControlData>


    <StringControlData>
      <Name>Place Building</Name>
      <Location>
        <X>700</X>
        <Y>690</Y>
      </Location>

      <GetFunction>function(PlaceBuilding)
  local dbBuildingInfo = TunerCity and TunerCity:GetPlacementBuilding('building')
  return dbBuildingInfo and Locale.Lookup( dbBuildingInfo.Name ) or ""
end
      </GetFunction>

      <SetFunction>function(PlaceBuilding)
end
      </SetFunction>
    </StringControlData>




    <StringControlData>
      <Name>Property Key</Name>
      <Location>
        <X>700</X>
        <Y>330</Y>
      </Location>

      <GetFunction>function(PropertyKey)
  return TunerCity and TunerCity.options.PropertyKey;
end
      </GetFunction>

      <SetFunction>function(PropertyKey)
  TunerCity.options.PropertyKey = PropertyKey;
end
      </SetFunction>
    </StringControlData>

    <StringControlData>
      <Name>Property Value</Name>
      <Location>
        <X>850</X>
        <Y>330</Y>
      </Location>

      <GetFunction>function(PropertyValue)
  return TunerCity and TunerCity.options.PropertyValue;
end
      </GetFunction>

      <SetFunction>function(PropertyValue)
  TunerCity.options.PropertyValue = PropertyValue;
end
      </SetFunction>
    </StringControlData>

  </StringControls>




  <Actions>

    <ActionData>
      <Name>+ Production</Name>
      <Location>
        <X>370</X>
        <Y>663</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
if pCity then
  local pBuildQueue = pCity:GetBuildQueue();
  pBuildQueue:AddProgress(TunerCity.options.AddProduction or 1);
end
      </Action>
    </ActionData>


    <ActionData>
      <Name>Pop +1</Name>
      <Location>
        <X>10</X>
        <Y>700</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and pCity:ChangePopulation(1);
      </Action>
    </ActionData>

    <ActionData>
      <Name>Pop -1</Name>
      <Location>
        <X>60</X>
        <Y>700</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and pCity:ChangePopulation(-1);
      </Action>
    </ActionData>


    <ActionData>
      <Name>Loyalty +10</Name>
      <Location>
        <X>120</X>
        <Y>700</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and pCity:ChangeLoyalty(10);
      </Action>
    </ActionData>

    <ActionData>
      <Name>Loyalty -10</Name>
      <Location>
        <X>190</X>
        <Y>700</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and pCity:ChangeLoyalty(10);
      </Action>
    </ActionData>


    <ActionData>
      <Name>Toggle Pillaged</Name>
      <Location>
        <X>280</X>
        <Y>700</Y>
      </Location>

      <Action>
local pDistrict = GetSelectedDistrict();
if pDistrict then
  local pillaged = pDistrict:IsPillaged()
  pDistrict:SetPillaged( not pillaged )
end
      </Action>
    </ActionData>




    <ActionData>
      <Name>+25 Damage Garrison</Name>
      <Location>
        <X>220</X>
        <Y>800</Y>
      </Location>

      <Action>
local pDistrict = TunerCity and TunerCity:GetSelectedCityCenter()
return pDistrict and pDistrict:ChangeDamage(DefenseTypes.DISTRICT_GARRISON, 25);
      </Action>
    </ActionData>

    <ActionData>
      <Name>+25 Damage Outer</Name>
      <Location>
        <X>220</X>
        <Y>830</Y>
      </Location>

      <Action>
local pDistrict = TunerCity and TunerCity:GetSelectedCityCenter()
return pDistrict and pDistrict:ChangeDamage(DefenseTypes.DISTRICT_OUTER, 25);
      </Action>
    </ActionData>

    <ActionData>
      <Name>+25 Damage Garrison (ENC)</Name>
      <Location>
        <X>220</X>
        <Y>860</Y>
      </Location>

      <Action>
local pDistrict = TunerCity and TunerCity:GetDistrictOfSelectedCity("DISTRICT_ENCAMPMENT");
return pDistrict and pDistrict:ChangeDamage(DefenseTypes.DISTRICT_GARRISON, 25);
      </Action>
    </ActionData>




    <ActionData>
      <Name>AI Focus: None</Name>
      <Location>
        <X>400</X>
        <Y>800</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
if pCity then
  -- Network.SendSetCityAIFocus(pCity :GetID(), CityAIFocusTypes.NO_CITY_AI_FOCUS_TYPE);
end
      </Action>
    </ActionData>

    <ActionData>
      <Name>AI Focus: Food</Name>
      <Location>
        <X>400</X>
        <Y>830</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
if pCity then
  -- Network.SendSetCityAIFocus(pCity :GetID(), CityAIFocusTypes.CITY_AI_FOCUS_TYPE_FOOD);
end
      </Action>
    </ActionData>

    <ActionData>
      <Name>AI Focus: Production</Name>
      <Location>
        <X>400</X>
        <Y>860</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
if pCity then
  -- Network.SendSetCityAIFocus(pCity :GetID(), CityAIFocusTypes.CITY_AI_FOCUS_TYPE_PRODUCTION);
end
      </Action>
    </ActionData>

    <ActionData>
      <Name>AI Focus: Gold</Name>
      <Location>
        <X>400</X>
        <Y>890</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
if pCity then
  -- Network.SendSetCityAIFocus(pCity :GetID(), CityAIFocusTypes.CITY_AI_FOCUS_TYPE_GOLD);
end
      </Action>
    </ActionData>




    <ActionData>
      <Name>Set Property</Name>
      <Location>
        <X>1000</X>
        <Y>330</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and pCity:SetProperty( TunerCity.options.PropertyKey, TunerCity.options.PropertyValue )
      </Action>
    </ActionData>

    <ActionData>
      <Name>Clear Property</Name>
      <Location>
        <X>1100</X>
        <Y>330</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and pCity:SetProperty( TunerCity.options.PropertyKey, nil )
      </Action>
    </ActionData>




    <ActionData>
      <Name>Set As Capital</Name>
      <Location>
        <X>1300</X>
        <Y>30</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and CityManager.SetAsCapital(pCity);
      </Action>
    </ActionData>

    <ActionData>
      <Name>Set As Original Capital</Name>
      <Location>
        <X>1300</X>
        <Y>70</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and CityManager.SetAsOriginalCapital(pCity);
      </Action>
    </ActionData>

    <ActionData>
      <Name>MAKE FREE CITY</Name>
      <Location>
        <X>1300</X>
        <Y>110</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and CityManager.TransferCityToFreeCities(pCity);
      </Action>
    </ActionData>

    <ActionData>
      <Name>DESTROY CITY</Name>
      <Location>
        <X>1300</X>
        <Y>150</Y>
      </Location>

      <Action>
local pCity = TunerCity and TunerCity:GetSelectedCity()
return pCity and Cities.DestroyCity(pCity);
      </Action>
    </ActionData>

  </Actions>

</PanelData>
