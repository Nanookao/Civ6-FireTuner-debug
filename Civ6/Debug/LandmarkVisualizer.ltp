<?xml version="1.0"?>
<PanelData xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Name>Landmark Visualizer</Name>
  <App>Civ6</App>
  <EnterAction>g_PanelHasFocus = true;
if (g_PlacementSettings.Active) then
		LuaEvents.TunerEnterDebugMode();
end
</EnterAction>
  <ExitAction>if (g_PanelHasFocus) then
	g_PanelHasFocus = false;
	if (g_PlacementSettings.Active) then
			LuaEvents.TunerExitDebugMode();
	end
end
</ExitAction>
  <CompatibleStates>
    <string>TunerAssetPreviewPanel</string>
  </CompatibleStates>
  <LoadStates>
    <string>UI:TunerAssetPreviewPanel</string>
  </LoadStates>
  <Actions>
    <ActionData>
      <Name>Place Districts</Name>
      <Action>g_LandmarkPlacement.Type = "Districts";
g_LandmarkPlacement.Place = function( plot, wx, wy, wz )
local strDistName = AssetPreview.GetDistrictName(g_SelectedDistrictIdx);
local tDistrict = GameInfo.Districts[strDistName];
local tDistReplace = GameInfo.DistrictReplaces[strDistName];
if ( tDistReplace ~= nil ) then strDistName = tDistReplace.ReplacesDistrictType; end
print( "WANT: " .. strDistName );

local tArtBuildings = AssetPreview.GetDistrictBuildingList(g_SelectedDistrictIdx);
local tKnownBldgs = {};
for astname,props in pairs(tArtBuildings) do tKnownBldgs[props.bldgname] = true; end

local tArtEra = { "ANC", "CLA", "CLA", "CLA", "IND", "MOD", "MOD", "MOD" };
local GetEraIndexFor = function( bldg )
		local eraidx = 1;
		if ( bldg.PrereqTech ~= nil ) then
			local tech = GameInfo.Technologies[bldg.PrereqTech];
			local era = GameInfo.Eras[tech.EraType];
			eraidx = era.ChronologyIndex;
		end
		if ( bldg.PrereqCivic ~= nil ) then
			local tech = GameInfo.Civics[bldg.PrereqCivic];
			local era = GameInfo.Eras[tech.EraType];
			if ( era.ChronologyIndex &gt; eraidx ) then eraidx = era.ChronologyIndex; end;
		end
		return eraidx;
	end

local tBldgToParents = {};
for row in GameInfo.BuildingPrereqs() do
	if ( tBldgToParents[row.Building] == nil ) then tBldgToParents[row.Building] = {}; end
	table.insert( tBldgToParents[row.Building], row.PrereqBuilding );
end

local tBldgToProps = {};
local tBldgToTier = {};
local tTierList = {{}}; -- Buildings in each tier depend on the previous tier and are mutually exclusive.
for bldg in GameInfo.Buildings() do
	-- The second condition here prevents us from even seeing buildings that aren't visible.
	-- That means a prereq chain that includes non-visible buildings will break this!
	if ( bldg.PrereqDistrict == strDistName ) then --and tKnownBldgs[bldg.BuildingType] ~= nil
		local props = {
			gamedata = bldg,
			eraidx = GetEraIndexFor( bldg ),
			kids = {}
		};
		
		tBldgToProps[bldg.BuildingType] = props;
		if ( tBldgToParents[bldg.BuildingType] == nil ) then
			table.insert( tTierList[1], props ); -- No prereqs, definitely goes in the first tier.
		end
	end
end

for name,props in pairs( tBldgToProps ) do
	if ( tBldgToParents[name] ~= nil ) then -- Set up the kid lists!
		for _,parent in ipairs(tBldgToParents[name]) do
			table.insert( tBldgToProps[parent].kids, name );
		end
	end
end

local ResolveKidTiers = function( props, tieridx, recursivecall )
		for _,kid in ipairs(props.kids) do
			tBldgToTier[kid] = tieridx;
			recursivecall( tBldgToProps[kid], tieridx + 1, recursivecall );
		end
	end

for _,props in ipairs( tTierList[1] ) do
	ResolveKidTiers( props, 2, ResolveKidTiers );
end

for name,tieridx in pairs( tBldgToTier ) do
	if ( tTierList[tieridx] == nil ) then tTierList[tieridx] = {}; end
	table.insert( tTierList[tieridx], tBldgToProps[name] );
end

for iTier,tierlist in ipairs(tTierList) do
	for _,props in ipairs(tierlist) do
		print ("TIER " .. tostring(iTier) .. ": " .. props.gamedata.BuildingType .. ", era: " ..  tArtEra[props.eraidx] );
	end
end

local tTupleList = {};
local CompoundTupleWith = function( tTuple, tieridx, selfcall )
		if ( tTierList[tieridx] == nil ) then return; end
		for _,tierthing in ipairs( tTierList[tieridx] ) do
			local newtuple = { eraidx=tTuple.eraidx, contents={} };
			if ( tierthing.eraidx &gt; newtuple.eraidx ) then newtuple.eraidx = tierthing.eraidx; end
			
			for i,v in ipairs( tTuple.contents ) do newtuple.contents[i] = v; end -- copy the tuple contents
			table.insert( newtuple.contents, tierthing );
			table.insert( tTupleList, newtuple );
			
			selfcall( newtuple, tieridx+1, selfcall );
		end
	end

local tRootTuple = { eraidx=GetEraIndexFor( tDistrict ), contents={} };
table.insert( tTupleList, tRootTuple );

CompoundTupleWith( tRootTuple, 1, CompoundTupleWith );

local PrintTupleContentList = function( contents )
		local str = "";
		for _,tuple in ipairs(contents) do
			str = str .. ", " .. tuple.gamedata.BuildingType;
		end
		return string.sub( str, 3 );
	end

print ("All Tuples:" );
for _,tuple in ipairs(tTupleList) do
	print ("Tuple: (" .. tArtEra[tuple.eraidx] .. "); " .. PrintTupleContentList(tuple.contents) );
end

local tArtEraExtents = {
	ANC = {"CLA", "IND", "MOD"},
	CLA = {"IND", "MOD"},
	IND = {"MOD"},
	MOD = {}
};

local tTuplesByEra = { ANC={}, CLA={}, IND={}, MOD={} };
for _,tuple in ipairs(tTupleList) do
	local strArtEra = tArtEra[tuple.eraidx];
	table.insert( tTuplesByEra[strArtEra], tuple );
	for _2,era in ipairs(tArtEraExtents[strArtEra]) do
		table.insert( tTuplesByEra[era], tuple );
	end
end


print ("All Sets:" );
local startx = plot:GetX();
local y = plot:GetY();

local tArtEraToGameEra = { ANC = "ERA_ANCIENT", CLA = "ERA_CLASSICAL", IND = "ERA_INDUSTRIAL", MOD = "ERA_MODERN" };

local PlaceAllTuplesInEra = function(era)
		local x = 0;
		local tuples = tTuplesByEra[era];
		local eraidx = GameInfo.Eras[tArtEraToGameEra[era]].Index;
		for _,tuple in ipairs(tuples) do
			print ("Set: (" .. era .. ") " .. PrintTupleContentList(tuple.contents) );
			
			AssetPreview.CreateDistrictAt(startx + x, y, g_SelectedCiv, eraidx, g_SelectedAppeal, g_SelectedPopulation, "Worked", g_SelectedDistrictIdx);
			for _2,props in ipairs( tuple.contents ) do
				print("plop " .. props.gamedata.BuildingType );
				AssetPreview.CreateBuildingAt(startx + x, y, "Worked", props.gamedata.Index );
			end
			x = x + 1;
		end
		if ( x ~= 0 ) then y = y - 1; end
	end

local TupleSorter = function( a, b )
		if ( #a.contents ~= #b.contents ) then return #a.contents &lt; #b.contents; end
		for i,thing_a in ipairs(a.contents) do
			if ( thing_a.gamedata.BuildingType ~= b.contents[i].gamedata.BuildingType ) then
				return thing_a.gamedata.BuildingType &lt; b.contents[i].gamedata.BuildingType
			end
		end
		return false;
	end
for era,list in pairs(tTuplesByEra) do table.sort( list, TupleSorter ); end

PlaceAllTuplesInEra( "ANC" );
PlaceAllTuplesInEra( "CLA" );
PlaceAllTuplesInEra( "IND" );
PlaceAllTuplesInEra( "MOD" );
end




</Action>
      <Location>
        <X>10</X>
        <Y>96</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Clear All Landmarks</Name>
      <Action>AssetPreview.ClearLandmarkSystem();</Action>
      <Location>
        <X>10</X>
        <Y>165</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>No Pop</Name>
      <Action>g_SelectedPopulation = 0;</Action>
      <Location>
        <X>400</X>
        <Y>291</Y>
      </Location>
    </ActionData>
    <ActionData>
      <Name>Max Pop</Name>
      <Action>g_SelectedPopulation = 22;</Action>
      <Location>
        <X>450</X>
        <Y>291</Y>
      </Location>
    </ActionData>
  </Actions>
  <StringControls>
    <StringControlData>
      <Name>Placing</Name>
      <GetFunction>if ( g_PlacementSettings.Active and g_PlacementSettings.PlacementHandler == g_LandmarkPlacement ) then
	return g_LandmarkPlacement.Type;
end
return "Nothing"</GetFunction>
      <SetFunction />
      <Location>
        <X>10</X>
        <Y>64</Y>
      </Location>
    </StringControlData>
  </StringControls>
  <IntegerControls>
    <IntegerControlData>
      <Name>Population</Name>
      <GetFunction>function()
	return g_SelectedPopulation;
end</GetFunction>
      <SetFunction>function(value)
	g_SelectedPopulation = tonumber(value);
end</SetFunction>
      <Location>
        <X>300</X>
        <Y>289</Y>
      </Location>
      <DefaultValue>-1</DefaultValue>
    </IntegerControlData>
  </IntegerControls>
  <FloatControls />
  <BooleanControls>
    <BooleanControlData>
      <Name>Enable Placement</Name>
      <GetFunction>function()
	return g_PlacementSettings.Active and
	       g_PlacementSettings.PlacementHandler == g_LandmarkPlacement;
end</GetFunction>
      <SetFunction>function(value)
	if value then
		LuaEvents.TunerEnterDebugMode();
		g_PlacementSettings.PlacementHandler = g_LandmarkPlacement;
	else
		if (g_PlacementSettings.PlacementHandler == g_LandmarkPlacement) then
			g_PlacementSettings.Active = false;
			LuaEvents.TunerExitDebugMode();
		end
	end
end</SetFunction>
      <Location>
        <X>10</X>
        <Y>31</Y>
      </Location>
    </BooleanControlData>
  </BooleanControls>
  <TableViews />
  <DataViews />
  <StatTrackers />
  <SelectionLists />
  <MultiselectLists>
    <MultiselectListData>
      <Location>
        <X>140</X>
        <Y>30</Y>
      </Location>
      <Size>
        <Width>224</Width>
        <Height>254</Height>
      </Size>
      <Name>Districts</Name>
      <PopulateList>function()
	local listItems = {};
	local nDistricts = AssetPreview.GetDistrictCount();
	if ( nDistricts &gt; 0 ) then
		for i = 0, nDistricts-1, 1 do
			table.insert( listItems, {
				Text = string.gsub( AssetPreview.GetDistrictName(i), "DISTRICT_", "" ),
				Selected = (g_SelectedDistrictIdx == i)
			} );
		end
	end
	return listItems;
end</PopulateList>
      <OnSelected>function(selection)
	local nDistricts = AssetPreview.GetDistrictCount();
	g_SelectedDistrictBaseName = nil;
	g_SelectedDistrictBldgName = nil;
	
	selection = "DISTRICT_" .. selection;
	if ( nDistricts &gt; 0 ) then
		for i = 0, nDistricts-1, 1 do
			if ( selection == AssetPreview.GetDistrictName(i) ) then
				g_SelectedDistrictIdx = i;
				break;
			end
		end
	else
		g_SelectedDistrictIdx = 0;
	end
end</OnSelected>
      <OnDeselected>function(selection)

end
</OnDeselected>
    </MultiselectListData>
    <MultiselectListData>
      <Location>
        <X>370</X>
        <Y>30</Y>
      </Location>
      <Size>
        <Width>195</Width>
        <Height>252</Height>
      </Size>
      <Name>Base Assets</Name>
      <PopulateList>function()
	if ( AssetPreview.GetDistrictCount() == 0 ) then return {}; end
	
	local listItems = {};
	local tDistrictBases = AssetPreview.GetDistrictBaseList(g_SelectedDistrictIdx);
	for name,props in pairs(tDistrictBases) do
		table.insert( listItems, { Text = name, Selected = false } );
	end
	return listItems;
end</PopulateList>
      <OnSelected>function(selection)

end</OnSelected>
      <OnDeselected>function(selection)

end
</OnDeselected>
    </MultiselectListData>
    <MultiselectListData>
      <Location>
        <X>570</X>
        <Y>30</Y>
      </Location>
      <Size>
        <Width>250</Width>
        <Height>251</Height>
      </Size>
      <Name>Building Assets</Name>
      <PopulateList>function()
	if ( AssetPreview.GetDistrictCount() == 0 ) then g_SelectedDistrictBldgName = nil; return {}; end
	local tBuildings = AssetPreview.GetDistrictBuildingList(g_SelectedDistrictIdx);
	
	local listItems = {};
	for name,_ in pairs(tBuildings) do
		if ( g_SelectedDistrictBldgName == nil) then
			g_SelectedDistrictBldgName = name;
		end
		table.insert( listItems, {
			Text = name,
			Selected = false
		} );
	end
	return listItems;
end</PopulateList>
      <OnSelected>function(selection)

end</OnSelected>
      <OnDeselected>function(selection)

end
</OnDeselected>
    </MultiselectListData>
    <MultiselectListData>
      <Location>
        <X>140</X>
        <Y>288</Y>
      </Location>
      <Size>
        <Width>150</Width>
        <Height>134</Height>
      </Size>
      <Name>Relevant Civilizations</Name>
      <PopulateList>function()
	if ( AssetPreview.GetDistrictCount() == 0 ) then return {}; end
	
	local civlist = {};
	local tDistrictBases = AssetPreview.GetDistrictBaseList(g_SelectedDistrictIdx);
	local tBuildings = AssetPreview.GetDistrictBuildingList(g_SelectedDistrictIdx);
	for name,props in pairs(tDistrictBases) do civlist[props.civ] = true; end
	for name,props in pairs(tBuildings) do civlist[props.civ] = true; end
	
	local bSomeoneSelected = false;
	local list = {};
	for civhash,_ in pairs( civlist ) do
		local strName = AssetPreview.GetCivName(civhash);
		if ( strName == "" ) then
			strName = "&lt;CIV: " .. tostring(civhash) .. "&gt;";
		else
			strName = string.sub( strName, 14 );
		end
		table.insert( list, { Text = strName, Selected = (civhash == g_SelectedCiv) } );
		bSomeoneSelected = bSomeoneSelected or (civhash == g_SelectedCiv);
	end
	
	if ( not bSomeoneSelected ) then
		g_SelectedCiv = nil;
		for k,v in pairs(civlist) do
			g_SelectedCiv = k;
			break;
		end
	end
	
	return list;
end</PopulateList>
      <OnSelected>function(selection)
	if ( AssetPreview.GetDistrictCount() == 0 ) then g_SelectedDistrictBldgName = nil; return {}; end
	
	local civlist = {};
	local tDistrictBases = AssetPreview.GetDistrictBaseList(g_SelectedDistrictIdx);
	local tBuildings = AssetPreview.GetDistrictBuildingList(g_SelectedDistrictIdx);
	for name,props in pairs(tDistrictBases) do civlist[props.civ] = true; end
	for name,props in pairs(tBuildings) do civlist[props.civ] = true; end
	
	for civhash,_ in pairs( civlist ) do
		local strName = AssetPreview.GetCivName(civhash);
		if ( strName == "" ) then
			strName = "&lt;CIV: " .. tostring(civhash) .. "&gt;";
		else
			strName = string.sub( strName, 14 );
		end
		if ( strName == selection ) then
			g_SelectedCiv = civhash;
			break;
		end
	end
end</OnSelected>
      <OnDeselected>function(selection)

end
</OnDeselected>
    </MultiselectListData>
    <MultiselectListData>
      <Location>
        <X>620</X>
        <Y>286</Y>
      </Location>
      <Size>
        <Width>150</Width>
        <Height>134</Height>
      </Size>
      <Name>Relevant Appeal Levels</Name>
      <PopulateList>function()
	if ( AssetPreview.GetDistrictCount() == 0 or g_SelectedDistrictIdx == nil ) then return {}; end
	
	local appeallist = {};
	local tDistrictBases = AssetPreview.GetDistrictBaseList(g_SelectedDistrictIdx);
	local tBuildings = AssetPreview.GetDistrictBuildingList(g_SelectedDistrictIdx);
	for name,props in pairs(tDistrictBases) do appeallist[props.appeal] = true; end
	for name,props in pairs(tBuildings) do appeallist[props.appeal] = true; end
	
	local bSomeoneSelected = false;
	local list = {};
	for hash,_ in pairs( appeallist ) do
		local strName = AssetPreview.GetAppealName(hash);
		if ( strName == "" ) then strName = "&lt;Appeal: " .. tostring(hash) .. "&gt;"; end
		table.insert( list, { Text = strName, Selected = (hash == g_SelectedAppeal) } );
		bSomeoneSelected = bSomeoneSelected or (hash == g_SelectedAppeal);
	end
	
	if ( not bSomeoneSelected ) then
		g_SelectedAppeal = nil;
		for k,v in pairs(appeallist) do
			g_SelectedAppeal = k;
			break;
		end
	end
	return list;
end</PopulateList>
      <OnSelected>function(selection)
	if ( AssetPreview.GetDistrictCount() == 0 or g_SelectedDistrictIdx == nil ) then return; end
	
	local appeallist = {};
	local tDistrictBases = AssetPreview.GetDistrictBaseList(g_SelectedDistrictIdx);
	local tBuildings = AssetPreview.GetDistrictBuildingList(g_SelectedDistrictIdx);
	for name,props in pairs(tDistrictBases) do appeallist[props.appeal] = true; end
	for name,props in pairs(tBuildings) do appeallist[props.appeal] = true; end
	
	for hash,_ in pairs( appeallist ) do
		local strName = AssetPreview.GetAppealName(hash);
		if ( strName == "" ) then strName = "&lt;Appeal: " .. tostring(hash) .. "&gt;"; end
		if ( strName == selection ) then
			g_SelectedAppeal = hash;
			break;
		end
	end
end</OnSelected>
      <OnDeselected>function(selection)

end
</OnDeselected>
    </MultiselectListData>
  </MultiselectLists>
</PanelData>